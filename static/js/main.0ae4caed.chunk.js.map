{"version":3,"sources":["redux/action/types.js","redux/action/index.js","components/WeatherBox/index.js","components/Choose/index.js","components/Loader/index.js","components/Error/index.js","containers/WeatherContainer/index.js","helpers.js","containers/Map.js","App.js","redux/reducer/weatherReducer.js","redux/reducer/index.js","redux/middleware/saga/worker/helpers.js","redux/middleware/saga/worker/index.js","redux/middleware/saga/watcher/watchCityWeather.js","redux/store/index.js","serviceWorker.js","index.js","Root.js"],"names":["GET_CITY_WEATHER","GET_CITY_WEATHER_SUCCESS","GET_CITY_WEATHER_START","GET_CITY_WEATHER_ERROR","getCityWeather","latitude","longitude","type","payload","id","WeatherBox","_this","this","_this$props","props","dayWeather","city","resultWeather","map","_ref","date","temperature","description","tmp","Math","round","react_default","a","createElement","key","className","onClick","onChooseDay","name","country","Component","components_Choose","components_Loader","components_Error","Weather","state","showWeather","chooseDay","index","setState","onRenderWeatherContainer","_this$props$weather","weather","list","loaded","loading","error","weatherBox","resultWeatherArray","oneDayWeatherArray","i","j","push","weatherForCurrentHour","main","temp","onParseWeatherData","WeatherBox_WeatherBox","Object","toConsumableArray","objectSpread","handleClickShowWeather","prevState","connect","MAPBOX_TOKEN","Map","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","resize","onViewportChange","width","window","innerWidth","height","innerHeight","viewport","onTransitionEnd","zoom","isWeatherBoxOpen","mapRef","React","createRef","addEventListener","removeEventListener","esm","assign","ref","mapboxApiAccessToken","containers_WeatherContainer","style","position","right","top","showCompass","dist_default","actions","App","containers_Map","defaultState","combineReducers","arguments","length","undefined","action","weatherApiRequest","url","fetch","then","response","json","weatherRequest","_action$payload","cityWeather","regenerator_default","wrap","_context","prev","next","put","concat","sent","t0","stop","_marked","watchWeatherRequests","takeEvery","watchCityWeather_marked","sagaMiddleware","createSagaMiddleware","middleware","applyMiddleware","store","createStore","reducer","run","watchCityWeather","Boolean","location","hostname","match","ReactDOM","render","es","children","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ae4caed.chunk.js","sourcesContent":["export const GET_CITY_WEATHER = 'GET_CITY_WEATHER';\r\nexport const GET_CITY_WEATHER_SUCCESS = 'GET_CITY_WEATHER_SUCCESS';\r\nexport const GET_CITY_WEATHER_START = 'GET_CITY_WEATHER_START';\r\nexport const GET_CITY_WEATHER_ERROR = 'GET_CITY_WEATHER_ERROR';","import { GET_CITY_WEATHER } from './types.js';\r\n\r\nexport function getCityWeather(latitude, longitude){\r\n    return {\r\n        type: GET_CITY_WEATHER,\r\n        payload: {\r\n            latitude,\r\n            longitude,\r\n            id: 'd76144444bfb6103f09bcc83ac4d7cc8'\r\n        }\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './index.css';\r\n\r\nexport default class WeatherBox extends Component {\r\n    static propTypes = {\r\n        dayWeather: PropTypes.array.isRequired,\r\n        onChooseDay: PropTypes.func.isRequired,\r\n        city: PropTypes.object.isRequired\r\n    };\r\n\r\n    render(){\r\n        const { dayWeather, city } = this.props;\r\n\r\n        const resultWeather = dayWeather.map(({ date, temperature, description }) => {\r\n            const tmp = Math.round(temperature - 272);\r\n\r\n            return <li key={date}><span>{date} : <strong>{tmp}C {description}</strong></span></li>\r\n        });\r\n\r\n        return (\r\n            <div className='weather-box'>\r\n                <div className='choose-day-button'>\r\n                    <button onClick={() => {this.props.onChooseDay(0)}} className='weather-button choose-day'>24 h</button>\r\n                    <button onClick={() => {this.props.onChooseDay(1)}} className='weather-button choose-day'>48 h</button>\r\n                    <button onClick={() => {this.props.onChooseDay(2)}} className='weather-button choose-day'>72 h</button>\r\n                </div>\r\n                <ul>\r\n                    {resultWeather}\r\n                    <li key={city.name}>\r\n                        <span>\r\n                            city : <strong>{(city.name) ? city.name : 'unknown city'}</strong>\r\n                        </span>\r\n                    </li>\r\n                    <li key={city.country}>\r\n                        <span>\r\n                            country : <strong>{(city.country) ? city.country : 'unknown country'}</strong>\r\n                        </span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './index.css';\r\n\r\nexport default props => {\r\n    return (\r\n        <div className='weather-box choose-container'>\r\n            <span>Please, select a city</span>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './index.css';\r\n\r\nexport default props => {\r\n    return (\r\n        <div className='weather-box loader'>\r\n            <span className='spinner'></span>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './index.css';\r\n\r\nexport default props => {\r\n    return (\r\n        <div className='weather-box error-container'>\r\n            <span>Oops... Something went wrong! Try to refresh the page or select existing city</span><br/>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport WeatherBox from '../../components/WeatherBox/index.js';\r\nimport Choose from '../../components/Choose/index.js';\r\nimport Loader from '../../components/Loader/index.js';\r\nimport Error from '../../components/Error/index.js';\r\nimport { onParseWeatherData } from \"../../helpers\";\r\nimport PropTypes from 'prop-types';\r\nimport './index.css';\r\n\r\nclass Weather extends Component {\r\n    state = {\r\n        showWeather: false,\r\n        chooseDay: 0\r\n    };\r\n\r\n    static propTypes = {\r\n        weather: PropTypes.object\r\n    };\r\n\r\n    onChooseDay = (index) => {\r\n        this.setState({ chooseDay: index })\r\n    };\r\n\r\n    onRenderWeatherContainer = () => {\r\n        const { list, city, loaded, loading, error } = this.props.weather;\r\n\r\n        if(error){\r\n            return <Error />\r\n        }\r\n\r\n        if(!loaded && !loading){\r\n            return <Choose />\r\n        }\r\n\r\n        if(loading){\r\n            return <Loader />\r\n        }\r\n\r\n        if(loaded){\r\n            const { chooseDay } = this.state;\r\n            const weatherBox = onParseWeatherData(list).map((dayWeather) => (\r\n                    <li key={dayWeather[0].date}> <WeatherBox dayWeather={[...dayWeather]}\r\n                                               onChooseDay={this.onChooseDay}\r\n                                               city={{...city}}/> </li>\r\n                )\r\n            );\r\n\r\n            return <ul> {weatherBox[chooseDay]} </ul>\r\n        }\r\n    };\r\n\r\n    handleClickShowWeather = () => {\r\n        this.setState((prevState) => ({ showWeather: !prevState.showWeather }))\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className='weather-button show-weather'\r\n                        onClick={this.handleClickShowWeather}>W</button>\r\n                <div className='weather-container'>\r\n                    {(this.state.showWeather) && this.onRenderWeatherContainer()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(state => ({ weather: state.weather }))(Weather);","export function onParseWeatherData(list){\r\n    let resultWeatherArray = [];\r\n    let oneDayWeatherArray = [];\r\n\r\n    for(let i = 0, j = 0; i < 25; i++, j++){\r\n        if(j === 8) {\r\n            j = 0;\r\n            resultWeatherArray.push(oneDayWeatherArray);\r\n            oneDayWeatherArray = [];\r\n        }\r\n\r\n        let weatherForCurrentHour = {\r\n            date: list[i]['dt_txt'],\r\n            temperature: list[i].main.temp,\r\n            description: list[i].weather[0].description\r\n        };\r\n\r\n        oneDayWeatherArray.push(weatherForCurrentHour);\r\n    }\r\n\r\n    return resultWeatherArray;\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../redux/action/index.js';\r\nimport ReactMapGL, {NavigationControl} from 'react-map-gl';\r\nimport Geocoder from 'react-map-gl-geocoder';\r\nimport Weather from './WeatherContainer/index.js';\r\nimport PropTypes from 'prop-types';\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\n\r\n/** Guys, please, don't use my mapbox token :)\r\n *  https://www.mapbox.com/help/how-access-tokens-work/#rotating-tokens - here You can get info about how get your own token */\r\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiYWxla3NleXRpbW9zY2hlbmtvIiwiYSI6ImNqbjh3Y2Q1azZzZW4zcHFjeXJsYnZ1MWYifQ.1QKeCXy-l6KVJFb9w4eNKg';\r\n\r\nclass Map extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            viewport: {\r\n                width: 400,\r\n                height: 400,\r\n                latitude: 27.56,\r\n                longitude: \t53.9,\r\n                zoom: 1\r\n            },\r\n            isWeatherBoxOpen: false\r\n        };\r\n        this.mapRef = React.createRef();\r\n    }\r\n\r\n    static propTypes = {\r\n        getCityWeather: PropTypes.func.isRequired\r\n    };\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', this.resize);\r\n        this.resize();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.resize);\r\n    }\r\n\r\n    resize = () => {\r\n        this.onViewportChange({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        });\r\n    };\r\n\r\n    onViewportChange = viewport => {\r\n        this.setState({\r\n            viewport: { ...this.state.viewport, ...viewport }\r\n        });\r\n    };\r\n\r\n    onTransitionEnd = () => {\r\n        const { getCityWeather } = this.props;\r\n\r\n        const cityLatitude = this.state.viewport.latitude;\r\n        const cityLongitude = this.state.viewport.longitude;\r\n\r\n        getCityWeather(cityLatitude, cityLongitude);\r\n    };\r\n\r\n    render() {\r\n        const {viewport} = this.state;\r\n\r\n        return (\r\n            <ReactMapGL\r\n                ref={this.mapRef}\r\n                {...viewport}\r\n                onViewportChange={this.onViewportChange}\r\n                onTransitionEnd={this.onTransitionEnd}\r\n                mapboxApiAccessToken={MAPBOX_TOKEN}\r\n            >\r\n                <Weather />\r\n                <div style={{position: 'absolute', right: 10, top: 60}}>\r\n                    <NavigationControl onViewportChange={this.onViewportChange}\r\n                                       showCompass={false}\r\n                    />\r\n                </div>\r\n                    <Geocoder mapRef={this.mapRef}\r\n                              onViewportChange={this.onViewportChange}\r\n                              mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                    />\r\n            </ReactMapGL>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, actions)(Map);","import React, { Component } from 'react';\nimport Map from './containers/Map.js';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Map />\n    );\n  }\n}\n\nexport default App;\n","import { GET_CITY_WEATHER_START, GET_CITY_WEATHER_SUCCESS, GET_CITY_WEATHER_ERROR } from \"../action/types\";\r\n\r\nconst defaultState = {\r\n    loading: false,\r\n    loaded: false,\r\n    error: false\r\n};\r\n\r\nexport default (state = defaultState, action) => {\r\n    const { type, weather } = action;\r\n\r\n    switch (type){\r\n        case GET_CITY_WEATHER_START:\r\n            return {...state, loading: true, loaded: false};\r\n            break;\r\n        case GET_CITY_WEATHER_SUCCESS:\r\n            return {...state, loading: false, loaded: true, ...weather};\r\n            break;\r\n        case GET_CITY_WEATHER_ERROR:\r\n            return {...state, error: true};\r\n            break;\r\n    }\r\n\r\n    return state;\r\n}","import { combineReducers } from 'redux';\r\nimport weather from './weatherReducer.js';\r\n\r\nexport default combineReducers({\r\n    weather\r\n});","export const weatherApiRequest = (url) => {\r\n    return fetch(url)\r\n        .then(response => response.json())\r\n};","import { call, put } from 'redux-saga/effects';\r\nimport { weatherApiRequest } from './helpers.js';\r\nimport { GET_CITY_WEATHER_SUCCESS, GET_CITY_WEATHER_START, GET_CITY_WEATHER_ERROR } from \"../../../action/types\";\r\n\r\n\r\nexport function* weatherRequest(action) {\r\n    try {\r\n        const { latitude, longitude, id } = action.payload;\r\n\r\n        yield put({type: GET_CITY_WEATHER_START});\r\n\r\n        const cityWeather = yield call(\r\n            weatherApiRequest,\r\n            `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${id}`\r\n        );\r\n\r\n        yield put({type: GET_CITY_WEATHER_SUCCESS, weather: cityWeather});\r\n    } catch (error) {\r\n        yield put({type: GET_CITY_WEATHER_ERROR});\r\n    }\r\n}\r\n","import { GET_CITY_WEATHER } from \"../../../action/types\";\r\nimport { takeEvery } from 'redux-saga/effects';\r\nimport { weatherRequest } from '../worker/index.js';\r\n\r\nfunction* watchWeatherRequests(){\r\n    yield takeEvery(GET_CITY_WEATHER, weatherRequest)\r\n}\r\n\r\nexport default watchWeatherRequests;","import { createStore, applyMiddleware } from 'redux';\r\nimport reducer from '../reducer/index.js';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport watchCityWeather from '../middleware/saga/watcher/watchCityWeather.js';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = applyMiddleware(sagaMiddleware);\r\nconst store = createStore(reducer, {}, middleware);\r\n\r\nexport default store;\r\n\r\n/** It's just for dev */\r\nwindow.store = store;\r\n\r\nsagaMiddleware.run(watchCityWeather);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Root from './Root.js';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Root>\n        <App />\n    </Root>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store/index.js';\r\n\r\nexport default props => {\r\n    return (\r\n        <Provider store={store}>\r\n            {props.children}\r\n        </Provider>\r\n    )\r\n}"],"sourceRoot":""}